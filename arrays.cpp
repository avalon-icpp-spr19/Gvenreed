#include <iostream>
#include <string>
#include <limits>
#include "Extention.h"

using namespace std;
using namespace ext;

const int SIZE = 10;

int main()
{
	setlocale(LC_ALL, "");
	int mas[SIZE];

	for (int i = 0; i < SIZE; ++i)
	{
		mas[i] = GetRandomValue(0, 10);
	}
	cout << "#1" << endl;
	//Задание 1

	//Объявите массив для хранения 10-ти целочисленных элементов
	int mas1[10];
	//Объявите константный массив для хранения 20-ти вещественных элементов
	float mas2[20];
	//Объявите массив для хранения 2-х символьных элементов
	char mas3[2];
	/*Пусть есть массив объявленный следующим образом:*/
	int data[6] = { 2, 4, 8, 16, 32, 64 };
	/*Какой размер имеет данный массив?*/
	//24

	//Данные какого типа он хранит
	//целые числа

	//Чему равен элемент массива с индексом 0?
	//2

	//Чему равен элемент массива с индексом 3?
	//16

	//Какой индекс у элемента 8?
	//2

	//Какой индекс у элемента 32?
	//4

	//Присвойте первому элементу массива значение 1.
	data[0] = 1;
	//Утройте значение последнего элемента в массиве.
	data[5] *= 3;
	//Выведите элементы массива на экран через пробел.
	for (int i = 0; i <= 5; ++i)
	{
		cout << data[i] << " ";
	}
	cout << "" << endl;
	//Объявите массив для хранения 5-ти элеменов любого типа и проинизиализируете его с помощью списка инициализации

	//Выведите объявленный массив на экран.

	//Можно ли не указывать размер массива при его создании?
	//нет
	//Если можно, то продемострируйте это.

	//Пусть массив объявили следующим образом:
	int data2[5] = { 1, 2 };

	//Каков размер данного массива?
	//20

	//Чему равен элемент с индексов 1? 
	//2

	//Чему равен элемент с индексом 2?
	//0

	//Проверьте ответы с помощью дебаггера.

	//Выведите все элементы массива на экран.
	for (int i = 0; i <= 4; ++i)
	{
		cout << data2[i] << " ";
	}
	cout << "" << endl;
	//Пусть массив объявлен следующим образом:
	const char alpha[3] = { 'a', 'b', 'c' };
	//Каков размер данного массива?
	//3

	//Чему равен элемент с индексов 0? 
	//a

	//Чему равен индекс у элемента 'c'
	//2

	//Допустимы ли следующие выражения:
	//alpha[0];
	//допустимо
	//alpha[3];
	//недопустимо
	//alpha[1] = 'd';
	//недопустимо
	//alpha[1] = 'b';
	//недопустимо

	//Выведите все элементы массива на экран.	
	for (int i = 0; i <= 4; ++i)
	{
		cout << alpha[i] << " ";
	}
	cout << "" << endl;
	cout << "" << endl;
	cout << "" << endl;
	cout << "" << endl;
	cout << "#2" << endl;
	//Задание 2
	//Объявите массив для хранения переменных типа int размером 20;
	int mas4[20];
	//Запишите в объявленный массив первые 20 натуральных чисел в порядке возрастания
	for (int i = 0; i <= 19; ++i)
	{
		mas4[i] = i + 1;
	}
	//Выведите все элементы массива на экран
	for (int i = 0; i <= 19; ++i)
	{
		cout << mas4[i] << " ";
	}
	cout << "" << endl;
	//Запишите в этот же массив первые 20 четных чисел в порядке возрастания
	for (int i = 1; i <= 20; ++i)
	{
		mas4[i - 1] = 2 * i;
	}
	//Выведите все элементы массива на экран
	for (int i = 0; i <= 19; ++i)
	{
		cout << mas4[i] << " ";
	}
	cout << "" << endl;
	//Запишите в этот же массив первые 20 степеней двойки (2^0, 2^1, ... , 2^19). Функцию pow не использовать
	mas4[0] = 1;
	for (int i = 1; i <= 19; ++i)
	{
		mas4[i] = 2 * mas4[i - 1];
	}
	//Выведите все элементы массива на экран по 5 элементов в одной строке
	for (int i = 0; i <= 3; ++i)
	{
		for (int j = 0 + 5 * i; j <= 4 + 5 * i; ++j)
		{
			cout << mas4[j] << " ";
		}
		cout << "" << endl;
	}
	cout << "" << endl;
	//Занулите в предыдущем массивы все элементы с нечетным индексов (i = 1, 3, ..., 19);
	for (int i = 1; i <= 19; i += 2)
	{
		mas4[i] = 0;
	}
	//Выведите все элементы массива на экран по 5 элементов в одной строке
	for (int i = 0; i <= 3; ++i)
	{
		for (int j = 0 + 5 * i; j <= 4 + 5 * i; ++j)
		{
			cout << mas4[j] << " ";
		}
		cout << "" << endl;
	}
	cout << "" << endl;
	cout << "" << endl;
	cout << "" << endl;
	cout << "#3" << endl;
	/* Задание 3
	При выполнении дальнейших заданий для заполнения массива случайными числами использовать функцию ext::GetRandomValue из Extention.hpp
	Например:
	int data[10];
	for(int i = 0; i < 10; ++i)
	{
	data[i] = ext::GetRandomValue(0, 100, true);
	}
	После выполнения данного кода массив data будет содержать 10 чисел в диапазоне от 0 до 100.*/

	//Сгенерируйте массив из 10 элементов в диапазоне от -10 до 10.
	int mas5[10];

	for (int dq = 0; dq <= 9; ++dq)
	{
		mas5[dq] = GetRandomValue(-10, 10);
	}
	//Выведите его на экран
	for (int ii = 0; ii <= 9; ++ii)
	{
		cout << mas5[ii] << "; ";
	}
	cout << "" << endl;
	//Найдите наибольший элемент в массиве.
	//Выведите на экран значение этого элемента и его индекс
	//(если максимальных элементов несколько вывести индекс любого).
	int max, ind;
	ind = 0;
	max = mas5[0];
	for (int i = 0; i <= 9; ++i)
	{
		if (max < mas5[i])
		{
			max = mas5[i];
			ind = i;
		}
	}
	cout << max << endl;
	cout << ind << endl;
	cout << "" << endl;
	//Сгенерируйте массив из 100 элементов в диапазоне от -100 до 100.
	int mas6[100];
	for (int i = 0; i <= 99; ++i)
	{
		mas6[i] = GetRandomValue(-100, 100);
	}
	//Посчитайте и выведите на экран
	//Сумму всех элементов этого массива.
	int sum;
	sum = 0;
	for (int i = 0; i <= 99; ++i)
	{
		sum += mas6[i];
	}
	cout << sum << endl;
	cout << "" << endl;
	//Количество элементов меньше 0, количество элементов равных 0, количество элементов больше 0
	int kolb, kolm, kolr;
	kolb = 0;
	kolm = 0;
	kolr = 0;
	for (int i = 0; i <= 99; ++i)
	{
		if (mas6[i] < 0)
		{
			kolm += 1;
		}
		if (mas6[i] > 0)
		{
			kolb += 1;
		}
		if (mas6[i] == 0)
		{
			kolr += 1;
		}
	}
	cout << kolb << endl;
	cout << kolm << endl;
	cout << kolr << endl;
	cout << "" << endl;
	//Сгенерируйте массив из 100 элементов в диапазоне от 1 до 100.
	int mas7[100];
	for (int i = 0; i <= 99; ++i)
	{
		mas7[i] = GetRandomValue(1, 100);
	}
	//Вывести на экран
	//Элементы в записи которых встречается цифра 2
	int masdop1[100];
	int ww = 0;
	for (int ii = 0; ii <= 99; ++ii)
	{
		masdop1[ii] = 0;
	}
	for (int i = 0; i <= 99; ++i)
	{
		if ((mas7[i] % 2 == 0) || (mas7[i] / 10 == 2))
		{
			masdop1[ww] = mas7[i];
			ww += 1;
				cout << mas7[i] << "; ";
		}
	}
	cout << "" << endl;
	cout << "" << endl;
	//Элементы в записи которых не встречаются нечетные цифры
	int masdop2[100];
	int qq = 0;
	for (int ii = 0; ii <= 99; ++ii)
	{
		masdop2[ii] = 0;
	}
	for (int i = 0; i <= 99; ++i)
	{
		if ((mas7[i] % 2 == 0) && ((mas7[i] / 10) % 2 == 0))
		{
			masdop2[qq] = mas7[i];
			qq += 1;
			cout << mas7[i] << "; ";
		}
	}
	cout << "" << endl;
	cout << "" << endl;
	//Сложите поэлементно массивы из двух предыдущих пунктов, записав результаты сложения в новый массив
	int mas8[100];
	int t = 1;
	int u = 0;
	for (int i = 0; i <= 99; ++i)
	{
		mas8[i] = masdop1[i] + masdop2[i];
	}
	//Выведите на экран получившийся массив по 10 элементов в строке.

			while (t != 0)
			{
				for (int j = 0 + 10 * u; j <= 9 + 10 * u; ++j)
				{
					cout << mas8[j] << " ";
					t = mas8[j];					
				}
				u += 1;
				cout << "" << endl;
			}
	cout << "" << endl;
	//Сгенерируйте массив из 100 элементов в диапазоне от 1 до 100.
	int mas9[100];
	for (int i = 1; i <= 100; ++i)
	{
		mas9[i] = GetRandomValue(1, 100);
	}
	//Попросите пользователя ввести число из этого же диапазона. 
	int x;
	cout << "Введите число в диапазоне от 1 до 100" << endl;
	cin >> x;
	/* Задание 4
	Сгенерируйте массив типа char из 100 элементов в диапазоне от a до z.
	Подсказка: функцию генерации рандомного элемента можно вызвать следующим образом:
	GetRandomValue('a','z');
	Выведите получившейся массив на экран в виде одной строки.
	Выведите на экран как часто каждая буква встречается в сгенерированном массиве.
	Выведите на экран вертикальную гистограмму рассчитанной частоты символов.
	Пример: "aabbdddz" для такой строки получится следующая гистограмма:
	|**
	|**
	|
	|***
	|
	|
	...
	|
	|
	|*
	На основании произведенных расчетов замените числовое представление на гистограмму, составленную из символов '*'
	*/
	//const int SIZE2 = 100;
	//const int COUNT_NUMBER = 26;
	char letters[100];
	int w;
	w = 0;
	for (int i = 0; i <= 99; ++i)
	{
		letters[i] = GetRandomValue('a', 'z');
	}
	for (int j = 0; j <= 99; ++j)
	{
		cout << letters[j] << "";
	}
	cout << "" << endl;
	cout << "" << endl;
	for (int h = 0; h <= 99; ++h)
	{
		if (letters[h] == 'a')
		{
			w += 1;
		}
	}
	cout << "|";
	for (int k = 0; k <= w; ++k)
	{
		cout << "*";
	}
	cout << "" << endl;
	w = 0;
	for (int h = 0; h <= 99; ++h)
	{
		if (letters[h] == 'b')
		{
			w += 1;
		}
	}
	cout << "|";
	for (int k = 0; k <= w; ++k)
	{
		cout << "*";
	}
	cout << "" << endl;
	w = 0;
	for (int h = 0; h <= 99; ++h)
	{
		if (letters[h] == 'c')
		{
			w += 1;
		}
	}
	cout << "|";
	for (int k = 0; k <= w; ++k)
	{
		cout << "*";
	}
	cout << "" << endl;
	w = 0;
	for (int h = 0; h <= 99; ++h)
	{
		if (letters[h] == 'd')
		{
			w += 1;
		}
	}
	cout << "|";
	for (int k = 0; k <= w; ++k)
	{
		cout << "*";
	}
	cout << "" << endl;
	w = 0;
	for (int h = 0; h <= 99; ++h)
	{
		if (letters[h] == 'e')
		{
			w += 1;
		}
	}
	cout << "|";
	for (int k = 0; k <= w; ++k)
	{
		cout << "*";
	}
	cout << "" << endl;
	w = 0;
	for (int h = 0; h <= 99; ++h)
	{
		if (letters[h] == 'f')
		{
			w += 1;
		}
	}
	cout << "|";
	for (int k = 0; k <= w; ++k)
	{
		cout << "*";
	}
	cout << "" << endl;
	w = 0;
	for (int h = 0; h <= 99; ++h)
	{
		if (letters[h] == 'g')
		{
			w += 1;
		}
	}
	cout << "|";
	for (int k = 0; k <= w; ++k)
	{
		cout << "*";
	}
	cout << "" << endl;
	w = 0;
	for (int h = 0; h <= 99; ++h)
	{
		if (letters[h] == 'h')
		{
			w += 1;
		}
	}
	cout << "|";
	for (int k = 0; k <= w; ++k)
	{
		cout << "*";
	}
	cout << "" << endl;
	w = 0;
	for (int h = 0; h <= 99; ++h)
	{
		if (letters[h] == 'i')
		{
			w += 1;
		}
	}
	cout << "|";
	for (int k = 0; k <= w; ++k)
	{
		cout << "*";
	}
	cout << "" << endl;
	w = 0;
	for (int h = 0; h <= 99; ++h)
	{
		if (letters[h] == 'j')
		{
			w += 1;
		}
	}
	cout << "|";
	for (int k = 0; k <= w; ++k)
	{
		cout << "*";
	}
	cout << "" << endl;
	w = 0;
	for (int h = 0; h <= 99; ++h)
	{
		if (letters[h] == 'k')
		{
			w += 1;
		}
	}
	cout << "|";
	for (int k = 0; k <= w; ++k)
	{
		cout << "*";
	}
	cout << "" << endl;
	w = 0;
	for (int h = 0; h <= 99; ++h)
	{
		if (letters[h] == 'b')
		{
			w += 1;
		}
	}
	cout << "|";
	for (int k = 0; k <= w; ++k)
	{
		cout << "*";
	}
	cout << "" << endl;
	w = 0;
	for (int h = 0; h <= 99; ++h)
	{
		if (letters[h] == 'l')
		{
			w += 1;
		}
	}
	cout << "|";
	for (int k = 0; k <= w; ++k)
	{
		cout << "*";
	}
	cout << "" << endl;
	w = 0;
	for (int h = 0; h <= 99; ++h)
	{
		if (letters[h] == 'm')
		{
			w += 1;
		}
	}
	cout << "|";
	for (int k = 0; k <= w; ++k)
	{
		cout << "*";
	}
	cout << "" << endl;
	w = 0;
	for (int h = 0; h <= 99; ++h)
	{
		if (letters[h] == 'n')
		{
			w += 1;
		}
	}
	cout << "|";
	for (int k = 0; k <= w; ++k)
	{
		cout << "*";
	}
	w = 0;
	cout << "" << endl;
	for (int h = 0; h <= 99; ++h)
	{
		if (letters[h] == 'o')
		{
			w += 1;
		}
	}
	cout << "|";
	for (int k = 0; k <= w; ++k)
	{
		cout << "*";
	}
	w = 0;
	cout << "" << endl;
	for (int h = 0; h <= 99; ++h)
	{
		if (letters[h] == 'p')
		{
			w += 1;
		}
	}
	cout << "|";
	for (int k = 0; k <= w; ++k)
	{
		cout << "*";
	}
	w = 0;
	cout << "" << endl;
	for (int h = 0; h <= 99; ++h)
	{
		if (letters[h] == 'q')
		{
			w += 1;
		}
	}
	cout << "|";
	for (int k = 0; k <= w; ++k)
	{
		cout << "*";
	}
	w = 0;
	cout << "" << endl;
	for (int h = 0; h <= 99; ++h)
	{
		if (letters[h] == 'r')
		{
			w += 1;
		}
	}
	cout << "|";
	for (int k = 0; k <= w; ++k)
	{
		cout << "*";
	}
	w = 0;
	cout << "" << endl;
	for (int h = 0; h <= 99; ++h)
	{
		if (letters[h] == 's')
		{
			w += 1;
		}
	}
	cout << "|";
	for (int k = 0; k <= w; ++k)
	{
		cout << "*";
	}
	w = 0;
	cout << "" << endl;
	for (int h = 0; h <= 99; ++h)
	{
		if (letters[h] == 't')
		{
			w += 1;
		}
	}
	cout << "|";
	for (int k = 0; k <= w; ++k)
	{
		cout << "*";
	}
	w = 0;
	cout << "" << endl;
	for (int h = 0; h <= 99; ++h)
	{
		if (letters[h] == 'b')
		{
			w += 1;
		}
	}
	cout << "|";
	for (int k = 0; k <= w; ++k)
	{
		cout << "*";
	}
	w = 0;
	cout << "" << endl;
	for (int h = 0; h <= 99; ++h)
	{
		if (letters[h] == 'u')
		{
			w += 1;
		}
	}
	cout << "|";
	for (int k = 0; k <= w; ++k)
	{
		cout << "*";
	}
	w = 0;
	cout << "" << endl;
	for (int h = 0; h <= 99; ++h)
	{
		if (letters[h] == 'v')
		{
			w += 1;
		}
	}
	cout << "|";
	for (int k = 0; k <= w; ++k)
	{
		cout << "*";
	}
	cout << "" << endl;
	w = 0;
	for (int h = 0; h <= 99; ++h)
	{
		if (letters[h] == 'w')
		{
			w += 1;
		}
	}
	cout << "|";
	for (int k = 0; k <= w; ++k)
	{
		cout << "*";
	}
	cout << "" << endl;
	w = 0;
	for (int h = 0; h <= 99; ++h)
	{
		if (letters[h] == 'x')
		{
			w += 1;
		}
	}
	cout << "|";
	for (int k = 0; k <= w; ++k)
	{
		cout << "*";
	}
	w = 0;
	cout << "" << endl;
	for (int h = 0; h <= 99; ++h)
	{
		if (letters[h] == 'y')
		{
			w += 1;
		}
	}
	cout << "|";
	for (int k = 0; k <= w; ++k)
	{
		cout << "*";
	}
	w = 0;
	cout << "" << endl;
	for (int h = 0; h <= 99; ++h)
	{
		if (letters[h] == 'z')
		{
			w += 1;
		}
	}
	cout << "|";
	for (int k = 0; k <= w; ++k)
	{
		cout << "*";
	}
	cout << "" << endl;
	cout << "" << endl;
	cout << "" << endl;
	cout << "#5" << endl;
	/* Задание 5
	Пусть есть двумерный массив объявленный следующим образом:
	int data[3][2] = { {2, 4}, {8, 16}, {32, 64} };

	Чему равно количество строк в данном массиве?
	3 строки

	Чему равно количество элементов в каждой строке?
	по два элемента в каждой стоке

	Какой размер имеет данный массив?


	Данные какого типа он хранит?
	int

	Как обратиться к элементу со значением 8?
	data[1][0]

	Как обратиться к элементу со значением 64?
	data[2][1]
	*/

	int data5[3][2] = { { 2, 4 },{ 8, 16 },{ 32, 64 } };

	//Присвойте первому элементу массива значение 1.
	data5[0][0] = 1;
	//Удвойте значение последнего элемента в массиве.
	data5[2][1] = data5[2][1] * 2;
	//Объявите двумерный массив размером 4х2 любого типа и проинизиализируете его с помощью списка инициализации
	int data6[4][2] = {{0,1},{1,2},{3,5},{8,13}};

	//Можно ли не указывать размер двумерного массива при его создании?
	//Можно не указывать размер первого измерения 
	
	//Если можно, то продемострируйте это.
	//
	//Пусть массив объявили следующим образом:
	int data4[][4] = { {1, 2}, {3,4,5} };
	//Каков размер данного массива?
	//Чему равен элемент data[0][0]? 
	//1
	//Чему равен элемент data[1][2]?
	//5
	//Проверьте ответы с помощью дебагера.
	
	//Увеличьте в два раза каждый элемент в данном массиве.
	for (int i = 0; i <= 1; ++i)
	{
		for (int j = 0; j <= 3; ++j)
		{
			data4[i][j] = data4[i][j] * 2;
		}
	}
	//Выведите все элементы массива на экран.
	//Использовать циклы for
	for (int i = 0; i <= 1; ++i)
	{
		for (int j = 0; j <= 3; ++j)
		{
			cout << data4[i][j] << "; ";
		}
	}
	cout << "" << endl;
	cout << "" << endl;
	cout << "" << endl;
	cout << "#6" << endl;
	/* Задание 6
	Сгенерируйте двумерный массив размером 10x10.
	Заполните его случайными значениями от 0 до 100
	Найдите и выведите на экран:
	Сгенерированный массив
	Сумму всех элементов массива
	Количество всех четных элементов.
	Максимальный и минимальный элементы массива вместе с их индексами
	*/
	int mas10[10][10];
	for (int i = 0; i <= 9; ++i)
	{
		for (int j = 0; j <= 9; ++j)
		{
			mas10[i][j] = GetRandomValue(0, 100);
		}
	}
	for (int i = 0; i <= 9; ++i)
	{
		for (int j = 0; j <= 9; ++j)
		{
			cout << mas10[i][j] << "; ";
		}
	}
	cout << "" << endl;
	cout << "" << endl;
	int sum10;
	sum10 = 0;
	for (int i = 0; i <= 9; ++i)
	{
		for (int j = 0; j <= 9; ++j)
		{
			sum10 += mas10[i][j];
		}		
	}
	cout << sum10 << endl;
	cout << "" << endl;
	int kolch10 = 0;
	for (int i = 0; i <= 9; ++i)
	{
		for (int j = 0; j <= 9; ++j)
		{
			if (mas10[i][j] % 2 == 0)
			{
				kolch10 += 1;
			}
		}
	}
	cout << kolch10 << endl;
	cout << "" << endl;
	int min10, max10;
	int indx10, indn10, iindx10, iindn10;
	min10 = mas10 [0][0];
	max10 = mas10[0][0];
	indx10 = 0;
	iindx10 = 0;
	iindn10 = 0;
	indn10 = 0;
	for (int i = 0; i <= 9; ++i)
	{
		for (int j = 0; j <= 9; ++j)
		{
			if (max10 < mas10[i][j])
			{
				max10 = mas10[i][j];
				indx10 = i;
				iindx10 = j;
			}
		}
	}
	cout << max10 << endl;
	cout << indx10 << "; " << iindx10 << endl;
	for (int i = 0; i <= 9; ++i)
	{
		for (int j = 0; j <= 9; ++j)
		{
			if (min10 > mas10[i][j])
			{
				min10 = mas10[i][j];
				indn10 = i;
				iindn10 = j;
			}
		}
	}
	cout << min10 << endl;
	cout << indn10 << "; " << iindn10 << endl;
	/* Дополнительное задание
	На вход подается строка, описывающая ситуацию на поле в игре "Крестики-нолики".
	На ее основании необходимо заполнить двумерный массив char field[3][3],
	и, проаназилировав его, вывести победителя или Draw,
	если выигрышной последовательности нет ни у одного, либо есть у обоих.
	Тестовые данные				Ожидаемый результат
	XXX OO. ...					Winner is X
	OXO XO. .XO					Draw
	OXO XOX OX.					Draw
	XOX OXO OXO					Draw
	... ... ...					Draw
	XXX OOO ...					Draw
	XOO XOO XX.					Winner is X
	.O. XO. XOX					Winner is O
	*/

}
